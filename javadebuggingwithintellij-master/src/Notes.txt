Step Over => continue to the next line of the program
Step Into => go inside a method
Step Out => move control out of the method
Smart Step Into => Run/DebuggingActions/ -> when a line of code has multiple
    method calls we can choose which method we step into
Run to Cursor => During debug run we can move control flow to a line with a cursor
    without placing any break points (will stop if there is a break point on the way)
Force Run to Cursor => will skip over any breakpoints between current line and the cursor

Watches => a glasses icon on the bottom left of the variables window
    We can watch specific variables, in case of objects we can choose to watch
    properties of the objects and we can use expressions as person.getAge()>30

We can evaluate expression one by one by clicking the variable during debug run and
    choosing Evaluate Expression, works like a Watch but it is a one off

We can change the value of a variable at debug runtime by choosing the variable in the
    variable debug window and pressing F2 or right click and Set Value

Filtering => We can filter arrays and collections by clicking on the object in the
    variable list and choosing Filter. We supply a condition i.e this.getAge() < 40
    where this refers to an item in the array

Conditional Breakpoint => When we place a break point inside of the loop for example
    and maybe one of a thousand iterations throws an error we can set a condition
    on the break point to stop execution only if a certain condition is met
    i.e iterating on the list where we expect a Person type and we get a String
    we can right click on the break point and set condition like
    !(personList.get(i) instanceof Person)
    When the condition will evaluate to true the execution of the program will break

Exception breakpoints => Run/ViewBreakpoints -> Exception break points are set
    globally, we do not assign them to any particular line of code.
    We can choose type of the exception and we can set various filters on the break point

Method breakpoints => we can put a break point on the method, diamond shape, execution
    will break on the entry and exit. Alternatively we can set up a break point
    in the View Breakpoints window, we fully qualify the class and we can choose
    one or more methods with a pattern i.e get*

Action Breakpoint => right click , yellow dot -> will not stop execution but it can
    log a message to the console when hit , can evaluate an expression

Force return => when control flow is halted inside a method we can return an arbitrary
    value from the method without the method finishing execution
    (frames -> right click on corresponding frame)
Throw exception => similar to Force return , we can throw an arbitrary exception from
    within the method

Field Watchpoints => (eye icon) a kind of conditional break point , will break if
    a field is being accessed or modified

Class Level Watch => during debug we can place a watch on a specific class
    right click in the variables window on an object of a class and
        -> New Class Level Watch , i.e this.getAge() > 20

Drop Frame => a kind of rewind feature for debugging -> we can go back to the earlier
    in the debug execution by selecting an earlier frame -> right click -> drop frames
    all frames after the clicked framed will be dropped and execution will return to
    the selected frame. Warning ! Local variables will be reset but global ones will not

Advanced Debugging Section ------------------------------------------------------------

Stream and Lambda => when break point is placed on the line of code with a stream operation
    and multiple method calls we can choose which stream operation to debug
    When we debug a stream a button Stream Current Stream Chain is available
    It will show us details of every operation in the chain

Control Stepping => File/Settings/Build,Execution,Deployment/Debugger/Stepping
    -> to avoid stepping into framework code during debugging we can add packages to the
     exclusion list i.e org.springframework.*

Custom Datatype Renderers => we can change the way objects are represented inside the
    debugger variable window. File/Settings/Build/Debugger/Data Views/Java Type Renderers
    -> we ad a class to the list and we supply an expression for rendering a node
    i.e String.format("Name: %s | Age: %s | Country: %s",this.getName(),this.getAge(),this.getCountry())
    Custom renderers are expensive, we can make them OnDemand or we can mute them from right click menu

